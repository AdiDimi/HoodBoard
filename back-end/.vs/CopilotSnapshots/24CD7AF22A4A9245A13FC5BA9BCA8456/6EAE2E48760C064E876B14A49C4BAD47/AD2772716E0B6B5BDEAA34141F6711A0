using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using StackExchange.Redis;

namespace AdsApi.Repositories;

public enum RepositoryMode { InMemory, RedisJson }

public sealed class AdsRepositorySettings
{
    public RepositoryMode Mode { get; set; } = RepositoryMode.RedisJson;
    public string? RedisConnection { get; set; } = "redis:6379";
    public int IdempotencyTtlSeconds { get; set; } = 600;
    public bool UseOutboxWriter { get; set; } = true;
}

public static class AdRepositoryExtensions
{
    private const string SectionName = "Ads:Repository";

    public static IServiceCollection AddAdsRepository(this IServiceCollection services, IConfiguration config, Action<AdsRepositorySettings>? overrideCfg = null)
    {
        services.AddOptions<AdsRepositorySettings>().Bind(config.GetSection(SectionName)).PostConfigure(o => overrideCfg?.Invoke(o));

        services.AddSingleton<IConnectionMultiplexer>(sp => {
            var opts = sp.GetRequiredService<IOptions<AdsRepositorySettings>>().Value;
            return ConnectionMultiplexer.Connect(opts.RedisConnection ?? "localhost:6379");
        });

        services.AddSingleton<IAdRepository>(sp => {
            var mux = sp.GetRequiredService<IConnectionMultiplexer>();
            var opts = sp.GetRequiredService<IOptions<AdsRepositorySettings>>();
            return new AdRedisJsonRepository(mux, opts);
        });

        services.AddHostedService<AdsApi.Workers.OutboxWriter>();
        return services;
    }

    public static async Task InitializeAdsRepositoryAsync(this IHost app)
    {
        using var scope = app.Services.CreateScope();
        var repo = scope.ServiceProvider.GetRequiredService<IAdRepository>();
        await repo.InitializeAsync();
    }
}
